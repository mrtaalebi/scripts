#!/bin/bash

# licensed to GPL

help() {
    echo ""
    echo "    dyg stands for DownYouGo and is a cli multi-proccess download manager"
    echo "    downloaded files will be saved to ~/Downloads/"
    echo ""
    echo "    *******************************************************************************"
    echo "    to make sure you have all the following requirements installed run the command:"
    echo "        sudo apt install curl gawk dos2unix bc"
    echo "    *******************************************************************************"
    echo ""
    echo "    usage:"
    echo "        dyg new <link> [param values]"
    echo "            starts a new download"
    echo "            params:"
    echo "                -n|--number    number of partitions (default: 16)"
    echo '                -f|--filename  file name to save (default: `basename $link``'
    echo '                -d|--dir       abs path to save directory (default: $HOME/Downloads/'
    echo "                -b|--background continue in background (default: false)"
    echo "                -h|--help      shows this help and exit"
    echo ""
    echo "        dyg list"
    echo "            lists all incomplete downloads in two columns: id and link"
    echo "        dyg resume <id>"
    echo "            resumes a paused or interrupted download"
    echo '            id: link id from `dyg list` command'
    echo "        dyg del <id>"
    echo "            deletes download with given id's info and temp"
    echo '            id: link id from `dyg list` command'
    echo ""
}


DYG_DIR="$HOME/.dyg"
mkdir -p $DYG_DIR

grep_awk() {
    if [ $# -ne 2 ]; then
        echo "grep_awk: expected 2 parameters (pattern and file) but $# recieved. exiting"
        exit 1
    fi

    gal=`grep -i $1 $2 | awk '{print $2}'`
}

new_download() {
    
    if [ $# == 0 ]; then
        echo "new download missing link. exiting"
        exit 1
    fi

    link=$1
    shift

    while (($# > 0)); do
        case "$1" in
            -n|--number)
                number="$2"
                shift
                shift
                ;;
            -f|--filename)
                filename="$2"
                shift
                shift
                ;;
            -d|--dir)
                dir="$2"
                shift
                shift
                ;;
            -b|--background)
                background=1
                shift
                ;; 
        esac
    done;


    if [ -z "$filename" ]; then
        filename=`basename $link`
    fi
    if [ -z "$dir" ]; then
        dir="$HOME/Downloads"
    fi
    if [ -z "$number" ]; then
        number=16
    fi
    out="$dir/$filename"
    if [ -f "$out" ]; then
        echo "a file with same name already exists in $out"
        echo "check it out. exiting!"
        exit 1
    fi

    for f in $DYG_DIR/*; do
        grep_awk "link" "$f"; l="$gal"
        if [ "$l" = "$link" ]; then
            echo 'same link exists to resume. use `dyg list` to find it. exiting'
            exit 1
        fi
    done

    i=0
    while [ 1 ]; do
        if ! [ -f $DYG_DIR/$i ]; then
            id=$i
            break
        fi
        i=$((i + 1))
    done
    INFO_FILE=$DYG_DIR/$id

    echo "link $link" > $INFO_FILE
    echo "filename $filename" >> $INFO_FILE
    echo "number $number" >> $INFO_FILE
    echo "out $out" >> $INFO_FILE
    echo "dir $dir" >> $INFO_FILE
    echo "time 1" >> $INFO_FILE
    echo "finished 0" >> $INFO_FILE
}

list_downloads() {
    
    if ! [ $# -eq 0 ]; then
        echo "list downloads recieved more than zere arguement. exiting."
        exit 1
    fi

    printf 'id\tfinished\tfilename\tlink\n'
    list=`ls $DYG_DIR/* | sort -n`
    for f in $list; do
        grep_awk "link" $f; l="$gal"
        grep_awk "filename" $f; n="$gal"
        grep_awk "finished" $f; d="$gal"
        printf '%s\t%s\t%s\t%s\n' `basename $f` $d $n $l
    done

    exit 0
}

resume_download() {
    
    if ! [ $# -eq 1 ]; then
        echo "resume download recieved more than one arguement. exiting."
        exit 1
    fi
    
    list=`ls $DYG_DIR/* | sort -n`
    for f in $list; do
        if [ `basename $f` = $1 ]; then

            grep_awk "finished" $f; finished="$gal"
            if [ $finished = "1" ]; then
                echo "download finished. you could download it from database by running \`dyg del $id\`. exiting."
                exit 1
            fi

            INFO_FILE=$f

            grep_awk "link" $f; link=$gal
            grep_awk "filename" $f; filename=$gal
            grep_awk "number" $f; number=$gal
            grep_awk "out" $f; out=$gal
            grep_awk "dir" $f; dir=$gal
            return 0
        fi
    done

    return 1
}

del_download() {

    if ! [ $# -eq 1 ]; then
        echo "del_download recieved $# args. 1 expected. exiting."
        exit 1
    fi
    
    INFO_FILE=$DYG_DIR/$1
    if ! [ -f $INFO_FILE ]; then
        echo "download with $1 id doesn't exist. exiting."
        exit 1
    fi

    grep_awk "filename" $INFO_FILE; filename=$gal
    grep_awk "dir" $INFO_FILE; temp_dir=$gal/.dyg/$filename

    rm -r $temp_dir
    rm $INFO_FILE

    echo "deleted successfully"
    exit 0
}

input() {    
    if [ $# -eq 0 ]; then
        help
        exit 0
    fi

    case $1 in
        "new")
            shift
            new_download $@
            ;;
        "list")
            shift
            list_downloads $@
            ;;
        "resume")
            shift
            resume_download $@
            ;;
        "del")
            shift
            del_download $@
            ;;
        *)
            help
            exit 0
            ;;
    esac
}


link=""
number=""
filename=""
dir=""
input "$@"

start_dir="$PWD"

stop_all() {
    if [ "$1" = "finished" ]; then
        sed -i "/finished/c finished 1" $INFO_FILE
    fi

    grep_awk "time" $INFO_FILE; total_time=$gal
    total_time=$((total_time + `date +"%s"` - start_sec))
    sed -i "/time/c time $total_time" $INFO_FILE

    if [ "$1" = "no_exit" ]; then
        return 0
    fi

    pkill -P $$
    exit 1
}

trap stop_all HUP INT QUIT TERM EXIT


head=`curl -L --head $link 2>&1`
if [ -z "$head" ]; then
    echo "server has not responded to head request, exiting"
    exit 1
fi

length=`curl -L --head $link 2>&1 | grep --ignore-case "content-length: [0-9]*" | awk '{print $2}' | dos2unix`
if [ -z "$length" ]; then
    echo "server bad response to curl --head $link, exiting"
    exit 1
fi

TEMP_DIR="$dir/.dyg/$filename/"
mkdir -p $TEMP_DIR

byte_on=0
part_length=`bc -l <<< "scale=0; $length / $number"`
for ((i=0; i < number; i++)); do
    part_file=$TEMP_DIR/$i.temp
    if [ -f $part_file ]; then
        currently_downloaded=`stat -c '%n %s' $part_file | awk '{print $2}'`
        if [ $currently_downloaded -ge $part_length ]; then
            byte_on=$((byte_on + part_length))
            continue
        fi
        start_from=`bc -l <<< "scale=0; $currently_downloaded + $byte_on"`
    else
        start_from=$byte_on
    fi
    if (($i == $number - 1)); then
        range="$start_from-"
    else
        range="$start_from-$((byte_on + part_length - 1))"
    fi
    byte_on=$((byte_on + part_length))
    curl -L -s -H "Range: bytes=$range" --get $link >> $part_file 2>&1 &
done


if [ $background ]; then
    echo "    continuing in background"
    kill -SIGSTOP $$
    kill -SIGCONT $$
fi


a=$((31 + RANDOM % 6))
color=$a
a="m"
color="$color$a"


echo 
start_sec=`date +"%s"`
last_sum=0
while ((1)); do
    printf "\033[2K\033[7m\t\033[$color      downloading      \033[0m\n"
    parts_sum=0
    for ((i=0;i < number; i++)); do
        file=$TEMP_DIR/$i.temp
        if [ ! -f $file ]; then
            part_size=0
        else
            part_size=`stat -c '%n %s' $file | awk '{print $2}'`
        fi
        parts_sum=$((parts_sum + part_size))
        printf "\033[2K\t\033[${color}part %03d:\t%6.2f%%\033[0m\n" "$i" `bc -l <<< "scale=4; $part_size / $part_length * 100"`
    done
    printf "\033[2K\033[7m\t\033[${color}total:% 16.2f%%\033[0m\n" `bc -l <<< "scale=4; $parts_sum / $length * 100"`
    printf "\033[2K\033[7m\t\033[${color}speed:% 12.2f MB/s\033[0m\n" `bc -l <<< "scale=4; ($parts_sum - $last_sum) / 1024 / 1024"`
    last_sum=$parts_sum
    printf "\033[$((number + 3))A"
     
    if [ "$parts_sum" -eq "$length" ]; then
        break;
    fi
    sleep 1
done
printf "\033[$((number + 3))B"
end_sec=`date +"%s"`


wait

stop_all "no_exit"

grep_awk "time" "$INFO_FILE"; total_time=$gal

printf "\t\033[${color}successfully downloaded\033[0m\n"
printf "\033[7m\t\033[${color}content:% 12.2f MB\033[0m\n" `bc -l <<< "scale=4; $length / 1024 / 1024"`
printf "\033[2K\033[7m\t\033[${color}in:% 18.2f m\033[0m\n" `bc -l <<< "scale=4; $total_time / 60"`
printf "\033[2K\033[7m\t\033[${color}with:% 13.2f MB/s\033[0m\n" `bc -l <<< "scale=4; $length / 1024 / 1024 / $total_time"`



cd $TEMP_DIR
list=`ls * | sort -n`

for f in $list; do
    cat $f >> $out
done

rm -r $TEMP_DIR

stop_all "finished"

